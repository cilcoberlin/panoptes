
from panoptes.analysis.axes import BaseAxis
from panoptes.analysis.axes.pairs import get_y_generator_method

class YAxis(BaseAxis):
	"""Abstract base class for a y-axis."""

	def generate_values(self, x_axis, x_values, sessions, filters):
		"""
		Return a list of y-values for the Session queryset contained in the
		`sessions` argument, created by the FilteredSessions instance in
		`filters`, mapped to the list of x-values given in the `x_values` list,
		generated by the `x_axis` XAxis class.

		This method simply acts as an intermediary that calls the method
		intended to render y-values when presented with x-values generated by
		the passed x-axis class.
		"""

		y_method = get_y_generator_method(x_axis, self)
		if not y_method:
			raise ValueError("No valid y-value generator could be found for the %(x)s and %(y)s axis pair" % {
				'x': x_axis.__class__.name,
				'y': self.__class__.name})

		return y_method(x_values, sessions, filters)

	def y_values(self, x_values, sessions, filters):
		"""
		This is a template for the axis value-generation function used by a Y
		axis. It takes a list of the values defining the x-axis in `x_values`
		and a `sessions` argument containing all Session instances that make up
		the data set.  It should return a list of values defining the y-axis.
		"""
		pass
